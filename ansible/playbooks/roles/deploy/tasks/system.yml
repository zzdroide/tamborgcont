- name: Disable PasswordAuthentication
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?PasswordAuthentication "
    line: "PasswordAuthentication no"
  register: sshd_config_edit

- name: Restart sshd
  ansible.builtin.systemd:
    name: sshd
    state: restarted
  when: sshd_config_edit.changed

- name: Set en_US.UTF-8 locale
  ansible.builtin.include_role:
    name: robertdebock.locale

- name: Disable quiet boot
  ansible.builtin.replace:
    path: /etc/default/grub
    regexp: ^GRUB_CMDLINE_LINUX_DEFAULT="quiet([ "].*)
    replace: GRUB_CMDLINE_LINUX_DEFAULT="\1
  register: dqb

- name: Update-grub
  ansible.builtin.command: update-grub
  when: dqb.changed
  changed_when: true

- name: Add silence-console.service
  ansible.builtin.copy:
    src: files/silence-console.service
    dest: /etc/systemd/system/
    owner: root
    group: root
    mode: "0644"

- name: Enable and start silence-console.service
  ansible.builtin.systemd:
    name: silence-console.service
    state: started
    enabled: true

- name: Set ext4 reserved space
  ansible.builtin.script: ext4_reserve.sh 2G /

- name: Check if firmware-realtek could be useful
  ansible.builtin.shell:
    cmd: 'set -o pipefail && dmesg | grep -q " firmware: failed to load rtl_nic/"'
    executable: /bin/bash
  failed_when: false
  changed_when: false
  register: dmesgrep

- name: Install firmware-realtek
  when: dmesgrep.rc == 0
  block:
    - name: Enable non-free-firmware archive
      ansible.builtin.replace:
        path: /etc/apt/sources.list
        regexp: ^deb(|-src) (\S+) trixie main$
        replace: deb\1 \2 trixie main non-free-firmware

    - name: Install the package
      ansible.builtin.apt:
        name: firmware-realtek
        state: present
        update_cache: true

- name: Enable WOL
  ansible.builtin.lineinfile:
    path: /etc/network/interfaces
    insertafter: ^iface {{ iface }} inet
    line: "  ethernet-wol g"
  register: enable_wol

- name: Apply interface changes
  ansible.builtin.shell: ifdown {{ iface }} && ifup {{ iface }}
  when: enable_wol.changed
  changed_when: true

- name: Assert WOL enabled
  ansible.builtin.shell:
    cmd: 'set -o pipefail && ethtool {{ iface }} | grep -q "Wake-on: g"'
    executable: /bin/bash
  changed_when: false
  tags: molecule-notest   # "netlink error: Operation not supported" in VirtualBox

- name: Check if autosuspend.conf is default
  ansible.builtin.shell:
    cmd: '[[ "$(head -n1 /etc/autosuspend.conf)" == "## This is an exemplary documentation file that mainly serves as a syntax explanation." ]]'
    executable: /bin/bash
  register: autosuspend_conf_default
  failed_when: false
  changed_when: false

- name: Copy autosuspend and borg-daily files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    force: "{{ item.force | default(false) }}"  # Don't overwrite existing
    owner: root
    group: root
    mode: "0644"
  loop:
    - src: files/autosuspend.conf
      dest: /etc/
      force: "{{ autosuspend_conf_default.rc == 0 }}"
    - src: files/borg-daily.service
      dest: /etc/systemd/system/
    - src: files/borg-daily.timer
      dest: /etc/systemd/system/
  register: autosuspend_copy

- name: Restart autosuspend on new config
  ansible.builtin.systemd:
    name: autosuspend.service
    state: restarted
  when: autosuspend_copy.results[0].changed

- name: Enable and start borg-daily.timer
  ansible.builtin.systemd:
    name: borg-daily.timer
    state: started
    enabled: true
